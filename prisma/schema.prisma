// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                      String                     @id @default(cuid())
    name                    String?
    email                   String?                    @unique
    emailVerified           DateTime?
    image                   String?
    accounts                Account[]
    sessions                Session[]
    savedVotes              SavedVote[]
    BookmarkedSenator       BookmarkedSenator[]
    BookmarkedRepresenative BookmarkedRepresentative[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Vote {
    // Have to fill DB so savedVote can reference a vote IN THE DB! duh.
    id            String      @id @default(cuid())
    congress      Int
    chamber       String
    rollCall      Int
    title         String?     @db.Text
    latestAction  String?     @db.Text
    description   String?     @db.Text
    result        String      @db.Text
    date          String      @db.Text
    demProgress   Json
    repProgress   Json
    indProgress   Json
    totalProgress Json
    voteSaves     SavedVote[]
}

model SavedVote {
    id      String @id @default(cuid())
    vote    Vote   @relation(fields: [voteId], references: [id])
    voteId  String
    savedBy User   @relation(fields: [userId], references: [id])
    userId  String @db.VarChar(255)

    @@index([userId, voteId])
}

model BookmarkedSenator {
    id           String  @id @default(cuid())
    senator      Senator @relation(fields: [senatorId], references: [id])
    senatorId    String
    bookmarkedBy User    @relation(fields: [userId], references: [id])
    userId       String  @db.VarChar(255)

    @@index([userId, senatorId])
}

model BookmarkedRepresentative {
    id               String         @id @default(cuid())
    represenative    Representative @relation(fields: [representativeId], references: [id])
    representativeId String
    bookmarkedBy     User           @relation(fields: [userId], references: [id])
    userId           String         @db.VarChar(255)

    @@index([userId, representativeId])
}

model Senator {
    id                   String              @id
    title                String
    shortTitle           String
    apiUri               String
    firstName            String
    lastName             String
    party                String
    twitterAccount       String?
    facebookAccount      String?
    youtubeAccount       String?
    url                  String?
    contactForm          String?
    inOffice             Boolean
    nextElection         String
    totalVotes           Int
    missedVotes          Int
    state                String
    senateClass          String
    stateRank            String
    votesWithPartyPct    Float
    votesAgainstPartyPct Float
    BookMarkedSenator    BookmarkedSenator[]
}

model Representative {
    id                       String                     @id
    title                    String
    shortTitle               String
    apiUri                   String
    firstName                String
    lastName                 String
    party                    String
    twitterAccount           String?
    facebookAccount          String?
    youtubeAccount           String?
    url                      String?
    contactForm              String?
    inOffice                 Boolean
    nextElection             String?
    totalVotes               Int?
    missedVotes              Int?
    state                    String
    district                 String
    votesWithPartyPct        Float?
    votesAgainstPartyPct     Float?
    BookmarkedRepresentative BookmarkedRepresentative[]
}

model HouseElection {
    id         String @id @default(cuid())
    cycle      String
    branch     String
    district   String
    candidateA String
    canidateB  String
}

model SenateElection {
    id         String @id @default(cuid())
    cycle      String
    branch     String
    district   String
    candidateA String
    candidateB String
}

// Congress API

model SponsoredLegislation {
    number           Int    @id
    congress         Int
    introducedDate   String
    latestAction     String
    latestActionDate String
    policyArea       String
    title            String
    type             String
    url              String
    member           Member @relation(fields: [memberBioguideId], references: [bioguideId])
    memberBioguideId String
}

model Member {
    bioguideId           String                 @id
    district             Int
    firstName            String
    lastName             String
    party                String
    chamber              String
    state                String
    url                  String
    SponsoredLegislation SponsoredLegislation[]
}
