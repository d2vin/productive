// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    savedVotes    SavedVote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Vote {
    // Have to fill DB so savedVote can reference a vote IN THE DB! duh.
    id            String      @id @default(cuid())
    rollCall      Int
    title         String?     @db.Text
    latestAction  String?     @db.Text
    description   String?     @db.Text
    result        String      @db.Text
    date          String      @db.Text
    demProgress   Json
    repProgress   Json
    indProgress   Json
    totalProgress Json
    voteSaves     SavedVote[]
}

model SavedVote {
    id      String @id @default(cuid())
    vote    Vote   @relation(fields: [voteId], references: [id])
    voteId  String
    savedBy User   @relation(fields: [userId], references: [id])
    userId  String @db.VarChar(255)

    @@index([userId, voteId])
}

model Senator {
    id                   String  @id
    title                String
    shortTitle           String
    apiUri               String
    firstName            String
    lastName             String
    party                String
    twitterAccount       String
    facebookAccount      String
    youtubeAccount       String
    url                  String
    contactForm          String
    inOffice             Boolean
    nextElection         String
    totalVotes           Int
    missedVotes          Int
    state                String
    senateClass          String
    stateRank            String
    votesWithPartyPct    Int
    votesAgainstPartyPct Int
}
